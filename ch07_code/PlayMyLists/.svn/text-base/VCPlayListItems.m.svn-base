//
//  PlayMyListsMasterViewController.m
//  PlayMyLists
//
//  Created by Bear Cahill on 11/30/11.
//  Copyright (c) 2011 __MyCompanyName__. All rights reserved.
//

#import "VCPlayListItems.h"

#import "PlayMyListsDetailViewController.h"

@interface VCPlayListItems ()
- (void)configureCell:(UITableViewCell *)cell atIndexPath:(NSIndexPath *)indexPath;
@end

@implementation VCPlayListItems

@synthesize fetchedResultsController = __fetchedResultsController;
@synthesize managedObjectContext = __managedObjectContext;
@synthesize detailItem = _detailItem;

- (void)awakeFromNib
{
    [super awakeFromNib];
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Release any cached data, images, etc that aren't in use.
}

- (void)mediaPickerDidCancel:(MPMediaPickerController *)mediaPicker
{
	if (NSNotFound != [[[UIDevice currentDevice] model] rangeOfString:@"iPad"].location)		
		[popoverController dismissPopoverAnimated:YES];
	else 
		[self dismissModalViewControllerAnimated:YES];
}


- (void)mediaPicker: (MPMediaPickerController *)mediaPicker didPickMediaItems:(MPMediaItemCollection *)mediaItemCollection
{
	if (NSNotFound == [[[UIDevice currentDevice] model] rangeOfString:@"iPad"].location)		
		[self dismissModalViewControllerAnimated:YES];
	else 
		[popoverController dismissPopoverAnimated:YES];
	
	for (MPMediaItem *mi in [mediaItemCollection items])
		[self insertNewObject];
    
	[self.tableView reloadData];	
}


-(void)showMediaPicker
{
	MPMediaPickerController *picker = [[MPMediaPickerController alloc] init]; 
	[picker setDelegate: self];                                         
	[picker setAllowsPickingMultipleItems: YES];                        
	picker.prompt = @"Pick Tracks";
    
	if (NSNotFound != [[[UIDevice currentDevice] model] rangeOfString:@"Simulator"].location)		
		return;
	
	if (NSNotFound == [[[UIDevice currentDevice] model] rangeOfString:@"iPad"].location)		
		[self presentModalViewController: picker animated: YES]; 
	else
	{
		UINavigationController *theNavController = [[UINavigationController alloc] initWithRootViewController:picker];
		[theNavController setNavigationBarHidden:YES];
		
		popoverController = [[UIPopoverController alloc] initWithContentViewController:theNavController];
		
		CGRect popOverRect = self.view.frame;
        
		CGSize MySize = CGSizeMake(320.0, 460.0);
		[popoverController setPopoverContentSize:MySize animated:YES];
		[popoverController presentPopoverFromRect:popOverRect inView:self.view permittedArrowDirections: UIPopoverArrowDirectionAny animated:YES];
	}
	
}

-(void)handleNowPlayingChange:(NSNotification*)notification
{
	MPMediaItem *nowPlaying = [musicPlayer nowPlayingItem];
	
	NSString *title = [nowPlaying valueForProperty:MPMediaItemPropertyTitle];
	
	if (nil == lblTitle)
	{
		CGRect r = self.view.frame;
		r.size.height = 44;
		lblTitle = [[UILabel alloc] initWithFrame:r];
		[lblTitle setTextAlignment:UITextAlignmentCenter];
		[lblTitle setTextColor:[UIColor blueColor]];
		[lblTitle setFont:[UIFont boldSystemFontOfSize:22]];
		[lblTitle setBackgroundColor:[UIColor blackColor]];
		[lblTitle setAlpha:0.8];
		[self.view addSubview:lblTitle];
	}
	[lblTitle setText:title];
	
	[lblTitle setHidden:NO];
	[lblTitle performSelector:@selector(setHidden:) withObject:[NSNumber numberWithBool:YES] afterDelay:2.0];
}


#pragma mark - View lifecycle

- (void)viewDidLoad
{
    [super viewDidLoad];
	// Do any additional setup after loading the view, typically from a nib.
    // Set up the edit and add buttons.
    self.navigationItem.leftBarButtonItem = self.editButtonItem;
    self.navigationItem.leftItemsSupplementBackButton = YES;
    self.title = @"Tracks";
    
    UIBarButtonItem *addButton = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemAdd target:self action:@selector(showMediaPicker)];
    self.navigationItem.rightBarButtonItem = addButton;
}

- (void)viewDidUnload
{
    [super viewDidUnload];
    // Release any retained subviews of the main view.
    // e.g. self.myOutlet = nil;
}

- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
}

- (void)viewDidAppear:(BOOL)animated
{
    [super viewDidAppear:animated];
}

- (void)viewWillDisappear:(BOOL)animated
{
	[super viewWillDisappear:animated];
}

- (void)viewDidDisappear:(BOOL)animated
{
	[super viewDidDisappear:animated];
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    // Return YES for supported orientations
    return (interfaceOrientation != UIInterfaceOrientationPortraitUpsideDown);
}

// Customize the number of sections in the table view.
- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    [self fetchedResultsController];
    return 1;
    
//    return [[self.fetchedResultsController sections] count];
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return [[(AppPlayList*)_detailItem tracks] count]; 
//    id <NSFetchedResultsSectionInfo> sectionInfo = [[self.fetchedResultsController sections] objectAtIndex:section];
//    return [sectionInfo numberOfObjects];
}

// Customize the appearance of table view cells.
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    static NSString *CellIdentifier = @"TrackCell";
    
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    if (cell == nil) 
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];
    [self configureCell:cell atIndexPath:indexPath];
    return cell;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
	if ([[[UIDevice currentDevice] model] rangeOfString:@"Simulator"].location != NSNotFound)
		return;
	if (nil == musicPlayer)
	{
		musicPlayer = [MPMusicPlayerController applicationMusicPlayer];
		[musicPlayer beginGeneratingPlaybackNotifications];
		[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(handleNowPlayingChange:)
													 name:MPMusicPlayerControllerNowPlayingItemDidChangeNotification
												   object:musicPlayer];	
		[musicPlayer setRepeatMode:MPMusicRepeatModeAll];
	}
	[musicPlayer stop];
	
	
	NSMutableArray *tracksToPlay = [NSMutableArray arrayWithCapacity:[[[(AppPlayList*)_detailItem tracks] allObjects] count]];
	for (NSManagedObject *managedObject in [[(AppPlayList*)_detailItem tracks] sortedArrayUsingDescriptors:[NSArray arrayWithObject:[NSSortDescriptor sortDescriptorWithKey:@"order" ascending:YES]]])
	{
		NSString *pID = [managedObject valueForKey:@"persistentID"];
		NSNumber *longID = [NSNumber numberWithLongLong:[pID longLongValue]];
		MPMediaPropertyPredicate *pred = [MPMediaPropertyPredicate predicateWithValue:longID forProperty:MPMediaItemPropertyPersistentID];
		MPMediaQuery *mpQ = [MPMediaQuery songsQuery];
		[mpQ addFilterPredicate:pred];
		
		NSArray *items = [mpQ items];
		
		if ([items count] > 0)
			[tracksToPlay addObjectsFromArray:items];
	}
	
	int nextCount = indexPath.row;
	for (int i=0; i<nextCount; i++)
	{
		NSObject *firstTrack = [tracksToPlay objectAtIndex:0];
		[tracksToPlay removeObjectAtIndex:0];
		[tracksToPlay addObject:firstTrack];
	}
	
	MPMediaItemCollection *collection = [MPMediaItemCollection collectionWithItems:tracksToPlay];
	[musicPlayer setQueueWithItemCollection:collection];
	[musicPlayer play];
	
}



/*
 // Override to support conditional editing of the table view.
 - (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath
 {
 // Return NO if you do not want the specified item to be editable.
 return YES;
 }
 */

- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath
{
    if (editingStyle == UITableViewCellEditingStyleDelete) {
        // Delete the managed object for the given index path
        NSManagedObjectContext *context = [self.fetchedResultsController managedObjectContext];
        [(AppPlayList*)_detailItem removeTracksObject:[self.fetchedResultsController objectAtIndexPath:indexPath]];
        [context deleteObject:[self.fetchedResultsController objectAtIndexPath:indexPath]];
        
        // Save the context.
        NSError *error = nil;
        if (![context save:&error]) {
            /*
             Replace this implementation with code to handle the error appropriately.
             
             abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development. 
             */
            NSLog(@"Unresolved error %@, %@", error, [error userInfo]);
            abort();
        }
    }   
}

- (BOOL)tableView:(UITableView *)tableView canMoveRowAtIndexPath:(NSIndexPath *)indexPath
{
    // The table view should not be re-orderable.
    return NO;
}

- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender
{
    if ([[segue identifier] isEqualToString:@"showDetail"]) {
        NSIndexPath *indexPath = [self.tableView indexPathForSelectedRow];
        NSManagedObject *selectedObject = [[self fetchedResultsController] objectAtIndexPath:indexPath];
        [[segue destinationViewController] setDetailItem:selectedObject];
    }
}

#pragma mark - Fetched results controller

- (NSFetchedResultsController *)fetchedResultsController
{
    if (__fetchedResultsController != nil) {
        return __fetchedResultsController;
    }
    
    // Set up the fetched results controller.
    // Create the fetch request for the entity.
    NSFetchRequest *fetchRequest = [[NSFetchRequest alloc] init];
    // Edit the entity name as appropriate.
    NSEntityDescription *entity = [NSEntityDescription entityForName:@"PlayListTrack" inManagedObjectContext:self.managedObjectContext];
    [fetchRequest setEntity:entity];
    
    // Set the batch size to a suitable number.
    [fetchRequest setFetchBatchSize:20];
    
    // Edit the sort key as appropriate.
    NSSortDescriptor *sortDescriptor = [[NSSortDescriptor alloc] initWithKey:@"persistentID" ascending:NO];
    NSArray *sortDescriptors = [NSArray arrayWithObjects:sortDescriptor, nil];
    
    [fetchRequest setSortDescriptors:sortDescriptors];
    
    // Edit the section name key path and cache name if appropriate.
    // nil for section name key path means "no sections".
    NSFetchedResultsController *aFetchedResultsController = [[NSFetchedResultsController alloc] initWithFetchRequest:fetchRequest managedObjectContext:self.managedObjectContext sectionNameKeyPath:nil cacheName:@"Master"];
    aFetchedResultsController.delegate = self;
    self.fetchedResultsController = aFetchedResultsController;
    
	NSError *error = nil;
	if (![self.fetchedResultsController performFetch:&error]) {
	    /*
	     Replace this implementation with code to handle the error appropriately.
         
	     abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development. 
	     */
	    NSLog(@"Unresolved error %@, %@", error, [error userInfo]);
//	    abort();
	}
    
    return __fetchedResultsController;
}    

- (void)controllerWillChangeContent:(NSFetchedResultsController *)controller
{
    [self.tableView beginUpdates];
}

- (void)controller:(NSFetchedResultsController *)controller didChangeSection:(id <NSFetchedResultsSectionInfo>)sectionInfo
           atIndex:(NSUInteger)sectionIndex forChangeType:(NSFetchedResultsChangeType)type
{
    switch(type) {
        case NSFetchedResultsChangeInsert:
            [self.tableView insertSections:[NSIndexSet indexSetWithIndex:sectionIndex] withRowAnimation:UITableViewRowAnimationFade];
            break;
            
        case NSFetchedResultsChangeDelete:
            [self.tableView deleteSections:[NSIndexSet indexSetWithIndex:sectionIndex] withRowAnimation:UITableViewRowAnimationFade];
            break;
    }
}

- (void)controller:(NSFetchedResultsController *)controller didChangeObject:(id)anObject
       atIndexPath:(NSIndexPath *)indexPath forChangeType:(NSFetchedResultsChangeType)type
      newIndexPath:(NSIndexPath *)newIndexPath
{
    UITableView *tableView = self.tableView;
    
    switch(type) {
        case NSFetchedResultsChangeInsert:
            [tableView insertRowsAtIndexPaths:[NSArray arrayWithObject:newIndexPath] withRowAnimation:UITableViewRowAnimationFade];
            break;
            
        case NSFetchedResultsChangeDelete:
            [tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:UITableViewRowAnimationFade];
            break;
            
        case NSFetchedResultsChangeUpdate:
            [self configureCell:[tableView cellForRowAtIndexPath:indexPath] atIndexPath:indexPath];
            break;
            
        case NSFetchedResultsChangeMove:
            [tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:UITableViewRowAnimationFade];
            [tableView insertRowsAtIndexPaths:[NSArray arrayWithObject:newIndexPath]withRowAnimation:UITableViewRowAnimationFade];
            break;
    }
}

- (void)controllerDidChangeContent:(NSFetchedResultsController *)controller
{
    [self.tableView endUpdates];
}

/*
 // Implementing the above methods to update the table view in response to individual changes may have performance implications if a large number of changes are made simultaneously. If this proves to be an issue, you can instead just implement controllerDidChangeContent: which notifies the delegate that all section and object changes have been processed. 
 
 - (void)controllerDidChangeContent:(NSFetchedResultsController *)controller
 {
 // In the simplest, most efficient, case, reload the table view.
 [self.tableView reloadData];
 }
 */

- (void)configureCell:(UITableViewCell *)cell atIndexPath:(NSIndexPath *)indexPath
{
    NSManagedObject *managedObject = [[[(AppPlayList*)_detailItem tracks] allObjects] objectAtIndex:indexPath.row]; // [self.fetchedResultsController objectAtIndexPath:indexPath];
//    cell.textLabel.text = [[managedObject valueForKey:@"persistentID"] description];
    
//    NSManagedObject *managedObject = [self.fetchedResultsController objectAtIndexPath:indexPath];
//    cell.textLabel.text = [[managedObject valueForKey:@"persistendID"] description];

	NSString *pID = [managedObject valueForKey:@"persistentID"];
	NSNumber *longID =
    [NSNumber numberWithLongLong:[pID longLongValue]];
	MPMediaPropertyPredicate *pred = [MPMediaPropertyPredicate 
                                      predicateWithValue:longID
                                      forProperty:MPMediaItemPropertyPersistentID];
	MPMediaQuery *mpQ = [MPMediaQuery songsQuery];
	[mpQ addFilterPredicate:pred];
	
	NSArray *items = [mpQ items];
	
	if ([items count] > 0)
		cell.textLabel.text = [[items objectAtIndex:0] 
                               valueForProperty:MPMediaItemPropertyTitle];
	else 
		cell.textLabel.text = @"Unknown Title"; 

}

- (void)insertNewObject
{
    // Create a new instance of the entity managed by the fetched results controller.
    NSManagedObjectContext *context = [self.fetchedResultsController managedObjectContext];
    NSEntityDescription *entity = [[self.fetchedResultsController fetchRequest] entity];
    NSManagedObject *newManagedObject = [NSEntityDescription insertNewObjectForEntityForName:[entity name] inManagedObjectContext:context];
    
    // If appropriate, configure the new managed object.
    // Normally you should use accessor methods, but using KVC here avoids the need to add a custom class to the template.
    [newManagedObject setValue:@"New Track" forKey:@"persistentID"];            
    [(AppPlayList*)_detailItem addTracksObject:newManagedObject];    
    
    // Save the context.
    NSError *error = nil;
    if (![context save:&error]) {
//        [self.tableView reloadData];
        /*
         Replace this implementation with code to handle the error appropriately.
         
         abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development. 
         */
        NSLog(@"Unresolved error %@, %@", error, [error userInfo]);
        abort();
    }
}

@end
